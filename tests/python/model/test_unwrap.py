import pdb
import numpy as np 
import matplotlib.pyplot as plt
from ispeech.source import *
from ispeech.transform import *
import math
def test_analysis():

    """
    fs = 44100#sample rate
    f = 500#frequency of signal
    M = 255#signal size
    N = 512#FFT size
    sine = SineGenerator(fs)
    sine.setFrequency(f)
    sine.setAmplitude(1.0)
    sine.setPhase(1.0)
    sine.generate(M)
    dftModel = ModelDFT()
    hamming = HammingWindow(M)
    DFT Model the signal
    y = dftModel.Analysis(sine,hamming,N)
    """
    pX = [0.0, 3.0034541513987043, 1.3011125837426532, 1.1654505416386836, 1.1901207849976556, 1.1980536910030337, 1.194789717824942, 1.188066264892784, 1.1891635797057212, 1.2336861886232826, -2.460754055856829, -1.3506322229323973, -1.5283383685032406, -2.725554908478177, 1.5520953861156974, 0.6083352488915061, -1.5819187046014183, -2.5083487044979598, 1.5793009217073783, 0.6269958939784402, -1.539733167888917, -2.5291980289412686, 1.6248808669594048, 0.5960073767596191, -1.4940214494786117, -2.561423843019811, 1.6696786183198289, 0.5657538678377, -1.4504438171940661, -2.588539561792247, 1.7120021844906628, 0.5421050592788166, -1.4093072965786624, -2.608754496852722, 1.752051624143239, 0.5251355357610743, -1.3702399300218768, -2.6227266226251817, 1.7902357822625683, 0.5138989747361157, -1.3328502086793605, -2.6314815965617253, 1.8269089557512879, 0.5073891588894062, -1.2968260307954014, -2.635961515928336, 1.8623424025110258, 0.5047455897067545, -1.2619331662541937, -2.636941521355925, 1.8967378467001226, 0.5052754915838915, -1.2279979489686854, -2.635038104756181, 1.9302449520223364, 0.5084314193240581, -1.194891155310677, -2.6307370515750477, 1.9629755690625192, 0.5137822124839486, -1.1625156957241964, -2.6244213520718174, 1.9950142381952305, 0.5209872552780583, -1.1307977108900378, -2.6163943833936183, 2.026425714476964, 0.5297758947799026, -1.0996802184035508, -2.606898023135726, 2.0572603336892135, 0.5399315840201118, -1.0691185751799668, -2.596126488590653, 2.0875578560135555, 0.5512798218270308, -1.0390772149851157, -2.584236841879272, 2.1173502412174114, 0.5636789994497677, -1.009527282455414, -2.57135697219944, 2.1466636702700876, 0.5770134310257572, -0.9804449019589455, -2.557591690259795, 2.1755200307931237, 0.5911880153496739, -0.9518099005499351, -2.543027412767142, 2.203938016885601, 0.6061241170570054, -0.923604859205806, -2.5277357911695595, 2.2319339487444405, 0.621756363084575, -0.8958144039599191, -2.5117765457253456, 2.2595223863442455, 0.6380301301431152, -0.8684246741670454, -2.495199697662206, 2.2867165905126776, 0.654899557471948, -0.8414229225292904, -2.4780473421345057, 2.3135288698036516, 0.6723259616328111, -0.8147972143394482, -2.4603550685834117, 2.3399708413132094, 0.690276561351792, -0.7885362014500948, -2.4421531079187035, 2.366053626311623, 0.7087234431395697, -0.7626289531687758, -2.4234672671416035, 2.391787996192456, 0.7276427151075539, -0.7370648305389648, -2.404319697014528, 2.4171844804835567, 0.7470138090372722, -0.7118333937686737, -2.3847295279760745, 2.442253445931848, 0.7668188998642423, -0.6869243350646098, -2.364713401160112, 2.4670051532760224, 0.7870424187865595, -0.6623274308525788, -2.3442859157202194, 2.4914497971804614, 0.8076706415857782, -0.6380325086017447, -2.3234600085336417, 2.5155975333304443, 0.8286913375856646, -0.6140294251759321, -2.302247279334424, 2.5394584957757504, 0.8500934680422432, -0.590308053119943, -2.280658271090242, 2.5630428071037237, 0.8718669249232914, -0.5668582735310553, -2.2587027137334443, 2.5863605833009498, 0.8940023031387162, -0.5436699731316503, -2.2363897374154726, 2.609421934717023, 0.9164907006205418, -0.5207330448499674, -2.213728060205193, 2.632236964528783, 0.9393235418609004, -0.49803739030642924, -2.190726154107304, 2.65481576530118, 0.9624924215021009, -0.47557292383473854, -2.167392392540066, 2.677168414601483, 0.9859889653363497, -0.4533295772368275, -2.1437351813806496, 2.6993049699985305, 1.0098047066633908, -0.4312973048385341, -2.119763075695921, 2.721235463997399, 1.0339309762377336, -0.4094660885580018, -2.095484883160093, 2.74296989907066, 1.0583588050589365, -0.3878259426451031, -2.0709097554738207, 2.7645182431413806, 1.0830788388102288, -0.366366918004573, -2.0460472681822397, 2.785890425555046, 1.1080812634543877, -0.34507910590467267, -2.0209074896141783, 2.807096333716111, 1.1333557418153972, -0.3239526410027017, -1.9955010391554198, 2.8281458102871784, 1.1588913605374775, -0.3029777037331548, -1.969839134628509, 2.8490486513312536, 1.184676587859788, -0.2821445218858348, -1.9439336296806433, 2.869814605058438, 1.2106992416370685, -0.2614433713434708, -1.917797040378913, 2.890453371249889, 1.2369464679127204, -0.24086457658724392, -1.8914425613371622, 2.910974601487531, 1.26340472995344, -0.22039850982951656, -1.8648840714542532, 2.931387899998535, 1.290059807772264, -0.2000355900196289, -1.83813612939682, 2.951702825110582, 1.3168968078509553, -0.179766281037607, -1.8112139585000842, 2.971928891273795, 1.3439001832318873, -0.15958108937828672, -1.7841334219107416, 2.992075571800752, 1.3710537632310051, -0.13947056132131783, -1.7569109880071432, 3.0121523016539973, 1.3983407928165623, -0.1194252796294346, -1.729563686415468, 3.0321684812053356, 1.425743980847393, -0.099435859913785, -1.7021090556645544, 3.0521334799511615, 1.4532455564877826, -0.07949294648995608, -1.6745650828516394, 3.072056640786241, 1.4808273332203359, -0.05958720817828032, -1.6469501363504384, 3.091947284426392, 1.5084707792437595, -0.03970933348901557, -1.6192828924101255, 3.111814714119645, 1.5361570932645503, -0.01985002617640327, -1.59158225719933, 3.131668220510514, 1.5638672848157134, -2.089140678773803e-12]
   

    pX2 = np.zeros(len(pX))
    pXR = np.zeros(len(pX))
    
    for i in range(len(pX)):
        pX2[i]=pX[i]

    """
    toadd = 0
    first = 1
    for i in range(len(pX2)-1):
        if(np.abs(pX2[i] - pX2[i+1]) > np.pi):

            if first == 1:
                toadd=np.pi*2
                first = 0
            else:
                toadd-=np.pi*2
                
            pXR[i+1]=pX2[i+1]+toadd
        else:
            pXR[i+1]=pX2[i+1]+ toadd


    """

    k = 0
    i = 1
    alpha = np.pi

    for i in range(len(pX)-1):
        pXR[i]=pX[i]+2*np.pi*k
        if(np.abs(pX2[i] - pX2[i+1]) > alpha):
            if pX[i+1] < pX[i]:
                k=k+1
            else:
                k=k-1
    

    pXR[i+1] = pX[i+1] + 2*np.pi*k
    
    plt.plot(np.arange(len(pX)),pX,'y',marker='x',label = 'wrapping phase')    
    pX = np.unwrap(pX)    
    plt.plot(np.arange(len(pX)),pX,'r',label = 'np.unwrap result')
    plt.plot(np.arange(len(pX)),pXR,'g',label = 'our unwrap result')

    plt.legend()
    plt.title('(pX)phase of spectrum')

    plt.show()
    
test_analysis()
